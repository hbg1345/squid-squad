{"ast":null,"code":"var _jsxFileName = \"C:\\\\github\\\\squid-squad\\\\client\\\\src\\\\PhaserBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Phaser from 'phaser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhaserBackground = () => {\n  _s();\n  const phaserRef = useRef(null);\n  const gameRef = useRef(null);\n  useEffect(() => {\n    if (gameRef.current) return;\n    const config = {\n      type: Phaser.AUTO,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      transparent: true,\n      parent: phaserRef.current,\n      scene: {\n        create() {\n          const particles = this.add.particles(0, 0, 'star', {\n            x: {\n              min: 0,\n              max: window.innerWidth\n            },\n            y: {\n              min: 0,\n              max: window.innerHeight\n            },\n            lifespan: 4000,\n            speed: {\n              min: 30,\n              max: 100\n            },\n            angle: {\n              min: 0,\n              max: 360\n            },\n            scale: {\n              start: 0.3,\n              end: 0\n            },\n            quantity: 2,\n            blendMode: 'ADD',\n            frequency: 100\n          });\n        },\n        preload() {\n          this.load.image('star', 'https://cdn.jsdelivr.net/gh/photonstorm/phaser@v3.24.1/examples/assets/particles/yellow.png');\n        }\n      }\n    };\n    gameRef.current = new Phaser.Game(config);\n    return () => {\n      if (gameRef.current) {\n        gameRef.current.destroy(true);\n        gameRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: phaserRef,\n    style: {\n      position: 'fixed',\n      inset: 0,\n      zIndex: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n_s(PhaserBackground, \"FDpsBO27G+DHdq4EDz8cxfRb8qc=\");\n_c = PhaserBackground;\nexport default PhaserBackground;\nvar _c;\n$RefreshReg$(_c, \"PhaserBackground\");","map":{"version":3,"names":["React","useEffect","useRef","Phaser","jsxDEV","_jsxDEV","PhaserBackground","_s","phaserRef","gameRef","current","config","type","AUTO","width","window","innerWidth","height","innerHeight","transparent","parent","scene","create","particles","add","x","min","max","y","lifespan","speed","angle","scale","start","end","quantity","blendMode","frequency","preload","load","image","Game","destroy","ref","style","position","inset","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/github/squid-squad/client/src/PhaserBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Phaser from 'phaser';\r\n\r\nconst PhaserBackground = () => {\r\n  const phaserRef = useRef(null);\r\n  const gameRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (gameRef.current) return;\r\n    const config = {\r\n      type: Phaser.AUTO,\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n      transparent: true,\r\n      parent: phaserRef.current,\r\n      scene: {\r\n        create() {\r\n          const particles = this.add.particles(0, 0, 'star', {\r\n            x: { min: 0, max: window.innerWidth },\r\n            y: { min: 0, max: window.innerHeight },\r\n            lifespan: 4000,\r\n            speed: { min: 30, max: 100 },\r\n            angle: { min: 0, max: 360 },\r\n            scale: { start: 0.3, end: 0 },\r\n            quantity: 2,\r\n            blendMode: 'ADD',\r\n            frequency: 100\r\n          });\r\n        },\r\n        preload() {\r\n          this.load.image('star', 'https://cdn.jsdelivr.net/gh/photonstorm/phaser@v3.24.1/examples/assets/particles/yellow.png');\r\n        },\r\n      },\r\n    };\r\n    gameRef.current = new Phaser.Game(config);\r\n    return () => {\r\n      if (gameRef.current) {\r\n        gameRef.current.destroy(true);\r\n        gameRef.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={phaserRef} style={{ position: 'fixed', inset: 0, zIndex: 0 }} />;\r\n};\r\n\r\nexport default PhaserBackground; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMO,OAAO,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE5BD,SAAS,CAAC,MAAM;IACd,IAAIQ,OAAO,CAACC,OAAO,EAAE;IACrB,MAAMC,MAAM,GAAG;MACbC,IAAI,EAAET,MAAM,CAACU,IAAI;MACjBC,KAAK,EAAEC,MAAM,CAACC,UAAU;MACxBC,MAAM,EAAEF,MAAM,CAACG,WAAW;MAC1BC,WAAW,EAAE,IAAI;MACjBC,MAAM,EAAEZ,SAAS,CAACE,OAAO;MACzBW,KAAK,EAAE;QACLC,MAAMA,CAAA,EAAG;UACP,MAAMC,SAAS,GAAG,IAAI,CAACC,GAAG,CAACD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE;YACjDE,CAAC,EAAE;cAAEC,GAAG,EAAE,CAAC;cAAEC,GAAG,EAAEZ,MAAM,CAACC;YAAW,CAAC;YACrCY,CAAC,EAAE;cAAEF,GAAG,EAAE,CAAC;cAAEC,GAAG,EAAEZ,MAAM,CAACG;YAAY,CAAC;YACtCW,QAAQ,EAAE,IAAI;YACdC,KAAK,EAAE;cAAEJ,GAAG,EAAE,EAAE;cAAEC,GAAG,EAAE;YAAI,CAAC;YAC5BI,KAAK,EAAE;cAAEL,GAAG,EAAE,CAAC;cAAEC,GAAG,EAAE;YAAI,CAAC;YAC3BK,KAAK,EAAE;cAAEC,KAAK,EAAE,GAAG;cAAEC,GAAG,EAAE;YAAE,CAAC;YAC7BC,QAAQ,EAAE,CAAC;YACXC,SAAS,EAAE,KAAK;YAChBC,SAAS,EAAE;UACb,CAAC,CAAC;QACJ,CAAC;QACDC,OAAOA,CAAA,EAAG;UACR,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,MAAM,EAAE,6FAA6F,CAAC;QACxH;MACF;IACF,CAAC;IACD/B,OAAO,CAACC,OAAO,GAAG,IAAIP,MAAM,CAACsC,IAAI,CAAC9B,MAAM,CAAC;IACzC,OAAO,MAAM;MACX,IAAIF,OAAO,CAACC,OAAO,EAAE;QACnBD,OAAO,CAACC,OAAO,CAACgC,OAAO,CAAC,IAAI,CAAC;QAC7BjC,OAAO,CAACC,OAAO,GAAG,IAAI;MACxB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOL,OAAA;IAAKsC,GAAG,EAAEnC,SAAU;IAACoC,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnF,CAAC;AAAC5C,EAAA,CAzCID,gBAAgB;AAAA8C,EAAA,GAAhB9C,gBAAgB;AA2CtB,eAAeA,gBAAgB;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import Phaser from 'phaser';\nclass BootScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'BootScene'\n    });\n  }\n  preload() {\n    // 실제 게임에서는 이미지 에셋 로드를 여기에 작성합니다.\n    // this.load.image('circle', 'assets/circle.png');\n    // this.load.image('triangle', 'assets/triangle.png');\n    // this.load.image('square', 'assets/square.png');\n  }\n  create() {\n    console.log('BootScene create method started!'); // 디버깅용 로그 추가\n    // 배경색을 설정하여 화면이 흰색이 아님을 확인\n    this.cameras.main.setBackgroundColor('#1a1a1a'); // 오징어 게임 분위기의 어두운 배경\n    const width = this.scale.width;\n    const height = this.scale.height;\n    const letters = 'SQUIDSQUAD';\n    const letterPositions = [{\n      x: width * 0.2,\n      y: height * 0.5\n    },\n    // S\n    {\n      x: width * 0.28,\n      y: height * 0.5\n    },\n    // Q\n    {\n      x: width * 0.36,\n      y: height * 0.5\n    },\n    // U\n    {\n      x: width * 0.44,\n      y: height * 0.5\n    },\n    // I\n    {\n      x: width * 0.52,\n      y: height * 0.5\n    },\n    // D\n    {\n      x: width * 0.6,\n      y: height * 0.5\n    },\n    // S\n    {\n      x: width * 0.68,\n      y: height * 0.5\n    },\n    // Q\n    {\n      x: width * 0.76,\n      y: height * 0.5\n    },\n    // U\n    {\n      x: width * 0.84,\n      y: height * 0.5\n    },\n    // A\n    {\n      x: width * 0.92,\n      y: height * 0.5\n    } // D\n    ];\n    const shapes = ['circle', 'triangle', 'square'];\n    const initialShapePositions = [{\n      x: width * 0.1,\n      y: height * 0.3\n    }, {\n      x: width * 0.9,\n      y: height * 0.7\n    }, {\n      x: width * 0.5,\n      y: height * 0.1\n    }\n    // ... 더 많은 초기 위치 추가\n    ];\n    const movingShapes = [];\n\n    // 임시 도형 생성 및 초기 위치 설정\n    initialShapePositions.forEach((pos, index) => {\n      const shapeType = shapes[index % shapes.length];\n      let shape;\n      const size = 50;\n      const graphics = this.add.graphics({\n        fillStyle: {\n          color: 0xffffff\n        }\n      });\n      if (shapeType === 'circle') {\n        graphics.fillCircle(0, 0, size / 2);\n      } else if (shapeType === 'triangle') {\n        graphics.fillTriangle(-size / 2, size / 2, size / 2, size / 2, 0, -size / 2);\n      } else if (shapeType === 'square') {\n        graphics.fillRect(-size / 2, -size / 2, size, size);\n      }\n      shape = this.add.sprite(pos.x, pos.y, graphics.texture);\n      graphics.destroy(); // 텍스처 생성 후 그래픽스 객체 삭제\n      shape.setScale(0.5);\n      movingShapes.push(shape);\n    });\n\n    // 글자 형성 애니메이션\n    movingShapes.forEach((shape, index) => {\n      this.tweens.add({\n        targets: shape,\n        x: letterPositions[index % letters.length].x,\n        y: letterPositions[index % letters.length].y,\n        duration: 1500,\n        ease: 'Power2',\n        delay: index * 100,\n        onComplete: () => {\n          if (index === movingShapes.length - 1) {\n            // 모든 도형 이동 완료 후 텍스트 표시\n            this.add.text(width / 2, height / 2, 'Squid Squad', {\n              fontSize: '80px',\n              fill: '#fff',\n              fontStyle: 'bold'\n            }).setOrigin(0.5);\n          }\n        }\n      });\n    });\n  }\n}\nexport default BootScene;","map":{"version":3,"names":["Phaser","BootScene","Scene","constructor","key","preload","create","console","log","cameras","main","setBackgroundColor","width","scale","height","letters","letterPositions","x","y","shapes","initialShapePositions","movingShapes","forEach","pos","index","shapeType","length","shape","size","graphics","add","fillStyle","color","fillCircle","fillTriangle","fillRect","sprite","texture","destroy","setScale","push","tweens","targets","duration","ease","delay","onComplete","text","fontSize","fill","fontStyle","setOrigin"],"sources":["C:/Users/Anna/Desktop/squid-squad/client/src/scenes/BootScene.js"],"sourcesContent":["import Phaser from 'phaser';\r\n\r\nclass BootScene extends Phaser.Scene {\r\nconstructor() {\r\nsuper({ key: 'BootScene' });\r\n}\r\n\r\npreload() {\r\n// 실제 게임에서는 이미지 에셋 로드를 여기에 작성합니다.\r\n// this.load.image('circle', 'assets/circle.png');\r\n// this.load.image('triangle', 'assets/triangle.png');\r\n// this.load.image('square', 'assets/square.png');\r\n}\r\n\r\ncreate() {\r\nconsole.log('BootScene create method started!'); // 디버깅용 로그 추가\r\n// 배경색을 설정하여 화면이 흰색이 아님을 확인\r\nthis.cameras.main.setBackgroundColor('#1a1a1a'); // 오징어 게임 분위기의 어두운 배경\r\nconst width = this.scale.width;\r\nconst height = this.scale.height;\r\nconst letters = 'SQUIDSQUAD';\r\nconst letterPositions = [\r\n{ x: width * 0.2, y: height * 0.5 }, // S\r\n{ x: width * 0.28, y: height * 0.5 }, // Q\r\n{ x: width * 0.36, y: height * 0.5 }, // U\r\n{ x: width * 0.44, y: height * 0.5 }, // I\r\n{ x: width * 0.52, y: height * 0.5 }, // D\r\n{ x: width * 0.6, y: height * 0.5 }, // S\r\n{ x: width * 0.68, y: height * 0.5 }, // Q\r\n{ x: width * 0.76, y: height * 0.5 }, // U\r\n{ x: width * 0.84, y: height * 0.5 }, // A\r\n{ x: width * 0.92, y: height * 0.5 }, // D\r\n];\r\nconst shapes = ['circle', 'triangle', 'square'];\r\nconst initialShapePositions = [\r\n{ x: width * 0.1, y: height * 0.3 },\r\n{ x: width * 0.9, y: height * 0.7 },\r\n{ x: width * 0.5, y: height * 0.1 },\r\n// ... 더 많은 초기 위치 추가\r\n];\r\nconst movingShapes = [];\r\n\r\n// 임시 도형 생성 및 초기 위치 설정\r\ninitialShapePositions.forEach((pos, index) => {\r\n  const shapeType = shapes[(index) % shapes.length];\r\n  let shape;\r\n  const size = 50;\r\n\r\n  const graphics = this.add.graphics({ fillStyle: { color: 0xffffff } });\r\n\r\n  if (shapeType === 'circle') {\r\n    graphics.fillCircle(0, 0, size / 2);\r\n  } else if (shapeType === 'triangle') {\r\n    graphics.fillTriangle(-size / 2, size / 2, size / 2, size / 2, 0, -size / 2);\r\n  } else if (shapeType === 'square') {\r\n    graphics.fillRect(-size / 2, -size / 2, size, size);\r\n  }\r\n\r\n  shape = this.add.sprite(pos.x, pos.y, graphics.texture);\r\n  graphics.destroy(); // 텍스처 생성 후 그래픽스 객체 삭제\r\n  shape.setScale(0.5);\r\n  movingShapes.push(shape);\r\n});\r\n\r\n// 글자 형성 애니메이션\r\nmovingShapes.forEach((shape, index) => {\r\n  this.tweens.add({\r\n    targets: shape,\r\n    x: letterPositions[(index) % letters.length].x,\r\n    y: letterPositions[(index) % letters.length].y,\r\n    duration: 1500,\r\n    ease: 'Power2',\r\n    delay: index * 100,\r\n    onComplete: () => {\r\n      if (index === movingShapes.length - 1) {\r\n        // 모든 도형 이동 완료 후 텍스트 표시\r\n        this.add.text(width / 2, height / 2, 'Squid Squad', {\r\n          fontSize: '80px',\r\n          fill: '#fff',\r\n          fontStyle: 'bold',\r\n        }).setOrigin(0.5);\r\n      }\r\n    },\r\n  });\r\n});\r\n}\r\n}\r\n\r\nexport default BootScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
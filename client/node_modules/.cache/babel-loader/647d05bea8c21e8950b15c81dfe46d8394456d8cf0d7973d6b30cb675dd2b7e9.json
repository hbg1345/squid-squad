{"ast":null,"code":"// src/scenes/BootScene.js\nimport Phaser from 'phaser';\nclass BootScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'BootScene'\n    });\n  }\n  preload() {\n    // 실제 게임에서는 이미지 에셋 로드를 여기에 작성합니다.\n    // 예: this.load.image('circle', 'assets/circle.png');\n  }\n  create() {\n    console.log('BootScene create method started!'); // 디버깅용 로그\n\n    const width = this.scale.width;\n    const height = this.scale.height;\n\n    // 캔버스 배경색 설정 (이 색이 보이는지 확인!)\n    this.cameras.main.setBackgroundColor('#1a1a1a'); // 오징어 게임 분위기의 어두운 배경\n\n    const letters = 'SQUIDSQUAD';\n    const letterPositions = [\n    // 'SQUID SQUAD' 글자가 정렬될 최종 위치 (화면 중앙 기준)\n    // 이 값들은 화면 크기에 따라 조절될 수 있습니다.\n    {\n      x: width * 0.20,\n      y: height * 0.5\n    },\n    // S\n    {\n      x: width * 0.26,\n      y: height * 0.5\n    },\n    // Q\n    {\n      x: width * 0.32,\n      y: height * 0.5\n    },\n    // U\n    {\n      x: width * 0.38,\n      y: height * 0.5\n    },\n    // I\n    {\n      x: width * 0.44,\n      y: height * 0.5\n    },\n    // D\n    {\n      x: width * 0.50,\n      y: height * 0.5\n    },\n    // (공백 대신 다음 글자로 바로 이어지도록)\n    {\n      x: width * 0.56,\n      y: height * 0.5\n    },\n    // S\n    {\n      x: width * 0.62,\n      y: height * 0.5\n    },\n    // Q\n    {\n      x: width * 0.68,\n      y: height * 0.5\n    },\n    // U\n    {\n      x: width * 0.74,\n      y: height * 0.5\n    },\n    // A\n    {\n      x: width * 0.80,\n      y: height * 0.5\n    } // D\n    ];\n    const shapes = ['circle', 'triangle', 'square'];\n    const movingShapes = [];\n    const shapeSize = 80; // 도형의 크기를 좀 더 키워봅시다.\n\n    // 초기 도형의 개수를 목표 글자 수에 맞춰 생성\n    const numberOfShapes = letters.length;\n    for (let i = 0; i < numberOfShapes; i++) {\n      const initialX = Phaser.Math.Between(width * 0.1, width * 0.9);\n      const initialY = Phaser.Math.Between(height * 0.1, height * 0.9);\n      const shapeType = shapes[i % shapes.length];\n\n      // 임시 그래픽스 객체 생성 (배경색과 대비되도록 흰색)\n      const graphics = this.add.graphics({\n        fillStyle: {\n          color: 0xffffff\n        }\n      });\n\n      // 도형을 (0,0)을 기준으로 그리되, 텍스처의 중앙에 오도록 오프셋 적용\n      const halfSize = shapeSize / 2;\n      if (shapeType === 'circle') {\n        graphics.fillCircle(halfSize, halfSize, halfSize); // (cx, cy, radius)\n      } else if (shapeType === 'triangle') {\n        // 삼각형 꼭짓점: (0, size), (size, size), (halfSize, 0)\n        graphics.fillTriangle(0, shapeSize, shapeSize, shapeSize, halfSize, 0);\n      } else if (shapeType === 'square') {\n        graphics.fillRect(0, 0, shapeSize, shapeSize); // (x, y, width, height)\n      }\n\n      // **여기서 명시적으로 텍스처를 생성합니다.**\n      const textureKey = 'tempShape_' + i;\n      graphics.generateTexture(textureKey, shapeSize, shapeSize); // (key, width, height)\n\n      // 생성된 텍스처를 사용하여 스프라이트를 만듭니다.\n      const shape = this.add.sprite(initialX, initialY, textureKey);\n      shape.setOrigin(0.5); // 스프라이트의 원점(pivot)을 중앙으로 설정\n      shape.setScale(0.5); // 크기 조절 (원래 크기의 절반)\n      shape.setAlpha(0); // 처음에는 투명하게 설정하여 페이드 인 효과를 줄 수 있도록\n\n      graphics.destroy(); // 그래픽스 객체는 텍스처 생성 후 삭제\n\n      movingShapes.push(shape);\n    }\n    let completedTweens = 0;\n    movingShapes.forEach((shape, index) => {\n      const targetLetterPos = letterPositions[index];\n\n      // 각 도형이 처음 등장하는 애니메이션 (페이드 인)\n      this.tweens.add({\n        targets: shape,\n        alpha: {\n          from: 0,\n          to: 1\n        },\n        // 투명도 0에서 1로\n        duration: 500,\n        // 0.5초 동안 등장\n        delay: index * 50,\n        // 순차적으로 등장\n        ease: 'Power1'\n      });\n\n      // 도형이 최종 위치로 이동하는 애니메이션\n      this.tweens.add({\n        targets: shape,\n        x: targetLetterPos.x,\n        y: targetLetterPos.y,\n        duration: 1200,\n        // 애니메이션 시간\n        ease: 'Power2',\n        delay: 500 + index * 80,\n        // 등장 애니메이션 후 약간의 딜레이를 두고 시작\n        onComplete: () => {\n          completedTweens++;\n          if (completedTweens === numberOfShapes) {\n            // 모든 목표 도형 애니메이션 완료 확인\n            // 모든 도형 이동 완료 후 최종 텍스트 표시\n            this.time.delayedCall(500, () => {\n              // 텍스트 나타나기 전 짧은 딜레이\n              const finalSquidSquadText = this.add.text(width / 2, height / 2, 'Squid Squad', {\n                fontSize: '90px',\n                // 더 크게\n                fill: '#e50914',\n                // 오징어 게임 테마 색상 (빨간색)\n                fontFamily: 'Arial Black, sans-serif',\n                // 좀 더 굵은 폰트\n                fontStyle: 'bold',\n                shadow: {\n                  offsetX: 5,\n                  offsetY: 5,\n                  color: '#000',\n                  blur: 10,\n                  stroke: false,\n                  fill: true\n                }\n              }).setOrigin(0.5);\n\n              // 텍스트 페이드 인 애니메이션\n              this.tweens.add({\n                targets: finalSquidSquadText,\n                alpha: {\n                  from: 0,\n                  to: 1\n                },\n                duration: 1000,\n                ease: 'Power1'\n              });\n\n              // 도형들 사라지게 하기\n              movingShapes.forEach(s => {\n                this.tweens.add({\n                  targets: s,\n                  alpha: 0,\n                  duration: 500,\n                  delay: 200,\n                  ease: 'Power1'\n                });\n              });\n            }, [], this);\n          }\n        }\n      });\n    });\n    console.log('BootScene create method finished!');\n  }\n}\nexport default BootScene;","map":{"version":3,"names":["Phaser","BootScene","Scene","constructor","key","preload","create","console","log","width","scale","height","cameras","main","setBackgroundColor","letters","letterPositions","x","y","shapes","movingShapes","shapeSize","numberOfShapes","length","i","initialX","Math","Between","initialY","shapeType","graphics","add","fillStyle","color","halfSize","fillCircle","fillTriangle","fillRect","textureKey","generateTexture","shape","sprite","setOrigin","setScale","setAlpha","destroy","push","completedTweens","forEach","index","targetLetterPos","tweens","targets","alpha","from","to","duration","delay","ease","onComplete","time","delayedCall","finalSquidSquadText","text","fontSize","fill","fontFamily","fontStyle","shadow","offsetX","offsetY","blur","stroke","s"],"sources":["C:/Users/Anna/Desktop/squid-squad/client/src/scenes/BootScene.js"],"sourcesContent":["// src/scenes/BootScene.js\r\nimport Phaser from 'phaser';\r\n\r\nclass BootScene extends Phaser.Scene {\r\n  constructor() {\r\n    super({ key: 'BootScene' });\r\n  }\r\n\r\n  preload() {\r\n    // 실제 게임에서는 이미지 에셋 로드를 여기에 작성합니다.\r\n    // 예: this.load.image('circle', 'assets/circle.png');\r\n  }\r\n\r\n  create() {\r\n    console.log('BootScene create method started!'); // 디버깅용 로그\r\n\r\n    const width = this.scale.width;\r\n    const height = this.scale.height;\r\n\r\n    // 캔버스 배경색 설정 (이 색이 보이는지 확인!)\r\n    this.cameras.main.setBackgroundColor('#1a1a1a'); // 오징어 게임 분위기의 어두운 배경\r\n\r\n    const letters = 'SQUIDSQUAD';\r\n    const letterPositions = [\r\n      // 'SQUID SQUAD' 글자가 정렬될 최종 위치 (화면 중앙 기준)\r\n      // 이 값들은 화면 크기에 따라 조절될 수 있습니다.\r\n      { x: width * 0.20, y: height * 0.5 }, // S\r\n      { x: width * 0.26, y: height * 0.5 }, // Q\r\n      { x: width * 0.32, y: height * 0.5 }, // U\r\n      { x: width * 0.38, y: height * 0.5 }, // I\r\n      { x: width * 0.44, y: height * 0.5 }, // D\r\n      { x: width * 0.50, y: height * 0.5 }, // (공백 대신 다음 글자로 바로 이어지도록)\r\n      { x: width * 0.56, y: height * 0.5 }, // S\r\n      { x: width * 0.62, y: height * 0.5 }, // Q\r\n      { x: width * 0.68, y: height * 0.5 }, // U\r\n      { x: width * 0.74, y: height * 0.5 }, // A\r\n      { x: width * 0.80, y: height * 0.5 }, // D\r\n    ];\r\n\r\n    const shapes = ['circle', 'triangle', 'square'];\r\n    const movingShapes = [];\r\n    const shapeSize = 80; // 도형의 크기를 좀 더 키워봅시다.\r\n\r\n    // 초기 도형의 개수를 목표 글자 수에 맞춰 생성\r\n    const numberOfShapes = letters.length;\r\n\r\n    for (let i = 0; i < numberOfShapes; i++) {\r\n      const initialX = Phaser.Math.Between(width * 0.1, width * 0.9);\r\n      const initialY = Phaser.Math.Between(height * 0.1, height * 0.9);\r\n      const shapeType = shapes[(i) % shapes.length];\r\n\r\n      // 임시 그래픽스 객체 생성 (배경색과 대비되도록 흰색)\r\n      const graphics = this.add.graphics({ fillStyle: { color: 0xffffff } });\r\n\r\n      // 도형을 (0,0)을 기준으로 그리되, 텍스처의 중앙에 오도록 오프셋 적용\r\n      const halfSize = shapeSize / 2;\r\n\r\n      if (shapeType === 'circle') {\r\n        graphics.fillCircle(halfSize, halfSize, halfSize); // (cx, cy, radius)\r\n      } else if (shapeType === 'triangle') {\r\n        // 삼각형 꼭짓점: (0, size), (size, size), (halfSize, 0)\r\n        graphics.fillTriangle(0, shapeSize, shapeSize, shapeSize, halfSize, 0);\r\n      } else if (shapeType === 'square') {\r\n        graphics.fillRect(0, 0, shapeSize, shapeSize); // (x, y, width, height)\r\n      }\r\n\r\n      // **여기서 명시적으로 텍스처를 생성합니다.**\r\n      const textureKey = 'tempShape_' + i;\r\n      graphics.generateTexture(textureKey, shapeSize, shapeSize); // (key, width, height)\r\n\r\n      // 생성된 텍스처를 사용하여 스프라이트를 만듭니다.\r\n      const shape = this.add.sprite(initialX, initialY, textureKey);\r\n      shape.setOrigin(0.5); // 스프라이트의 원점(pivot)을 중앙으로 설정\r\n      shape.setScale(0.5); // 크기 조절 (원래 크기의 절반)\r\n      shape.setAlpha(0); // 처음에는 투명하게 설정하여 페이드 인 효과를 줄 수 있도록\r\n\r\n      graphics.destroy(); // 그래픽스 객체는 텍스처 생성 후 삭제\r\n\r\n      movingShapes.push(shape);\r\n    }\r\n\r\n    let completedTweens = 0;\r\n\r\n    movingShapes.forEach((shape, index) => {\r\n      const targetLetterPos = letterPositions[index];\r\n\r\n      // 각 도형이 처음 등장하는 애니메이션 (페이드 인)\r\n      this.tweens.add({\r\n          targets: shape,\r\n          alpha: { from: 0, to: 1 }, // 투명도 0에서 1로\r\n          duration: 500, // 0.5초 동안 등장\r\n          delay: index * 50, // 순차적으로 등장\r\n          ease: 'Power1'\r\n      });\r\n\r\n      // 도형이 최종 위치로 이동하는 애니메이션\r\n      this.tweens.add({\r\n        targets: shape,\r\n        x: targetLetterPos.x,\r\n        y: targetLetterPos.y,\r\n        duration: 1200, // 애니메이션 시간\r\n        ease: 'Power2',\r\n        delay: 500 + (index * 80), // 등장 애니메이션 후 약간의 딜레이를 두고 시작\r\n        onComplete: () => {\r\n          completedTweens++;\r\n          if (completedTweens === numberOfShapes) { // 모든 목표 도형 애니메이션 완료 확인\r\n            // 모든 도형 이동 완료 후 최종 텍스트 표시\r\n            this.time.delayedCall(500, () => { // 텍스트 나타나기 전 짧은 딜레이\r\n              const finalSquidSquadText = this.add.text(width / 2, height / 2, 'Squid Squad', {\r\n                fontSize: '90px', // 더 크게\r\n                fill: '#e50914', // 오징어 게임 테마 색상 (빨간색)\r\n                fontFamily: 'Arial Black, sans-serif', // 좀 더 굵은 폰트\r\n                fontStyle: 'bold',\r\n                shadow: {\r\n                  offsetX: 5,\r\n                  offsetY: 5,\r\n                  color: '#000',\r\n                  blur: 10,\r\n                  stroke: false,\r\n                  fill: true\r\n                }\r\n              }).setOrigin(0.5);\r\n\r\n              // 텍스트 페이드 인 애니메이션\r\n              this.tweens.add({\r\n                targets: finalSquidSquadText,\r\n                alpha: { from: 0, to: 1 },\r\n                duration: 1000,\r\n                ease: 'Power1',\r\n              });\r\n\r\n              // 도형들 사라지게 하기\r\n              movingShapes.forEach(s => {\r\n                this.tweens.add({\r\n                  targets: s,\r\n                  alpha: 0,\r\n                  duration: 500,\r\n                  delay: 200,\r\n                  ease: 'Power1'\r\n                });\r\n              });\r\n\r\n            }, [], this);\r\n          }\r\n        },\r\n      });\r\n    });\r\n    console.log('BootScene create method finished!');\r\n  }\r\n}\r\n\r\nexport default BootScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}